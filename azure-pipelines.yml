# Conventions:
# - Do not quote strings except for paths, scripts, and task arguments.
# - Add an empty line before and after each stage, job, and step.
# Notes:
# - Commented out .NET Core SDK installation as available on Microsoft-hosted agents.

trigger:
- '*'

variables:
  - group: spacegame
  - name: dotNetProjectName
    value: Tailspin.SpaceGame.Web
  - name: buildConfiguration
    value: Release
  - name: releaseBranchName
    value: release
  # - name: dotnetSdkVersion
  #   value: 3.1.300

stages:

- stage: Build
  displayName: Build app
  jobs:

  - job: Build
    pool:
      vmImage: ubuntu-20.04
      demands:
      - npm
    variables:
      wwwrootDir: $(dotNetProjectName)/wwwroot
    steps:

    # - task: UseDotNet@2
    #   displayName: Use .NET Core SDK $(dotnetSdkVersion)
    #   inputs:
    #     version: $(dotnetSdkVersion)

    - task: Npm@1
      displayName: Run npm install
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: Compile Sass assets

    - task: gulp@1
      displayName: Run gulp tasks

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: Write build info
      workingDirectory: $(wwwrootDir)

    # - task: NuGetCommand@2
    #   displayName: Restore solution dependencies
    #   inputs:
    #     command: restore
    #     restoreSolution: '**/*.sln'
    #     feedsToUse: select
    #     vstsFeed: $(System.TeamProject)/$(artifactsFeedName)
    
    - task: DotNetCoreCLI@2
      displayName: Restore app and unit tests dependencies
      inputs:
        command: restore
        feedsToUse: select
        vstsFeed: $(System.TeamProject)/$(artifactsFeedName)
        projects: |
          **/$(dotNetProjectName).csproj
          **/$(dotNetProjectName).Tests.csproj

    - task: DotNetCoreCLI@2
      displayName: Build app and unit tests - $(buildConfiguration)
      inputs:
        command: build
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: |
          **/$(dotNetProjectName).csproj
          **/$(dotNetProjectName).Tests.csproj

    - task: DotNetCoreCLI@2
      displayName: Install .NET Core tools from local manifest
      inputs:
        command: custom
        custom: tool
        arguments: 'restore'

    - task: DotNetCoreCLI@2
      displayName: Run unit tests - $(buildConfiguration)
      inputs:
        command: test
        arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '**/$(dotNetProjectName).Tests.csproj'

    - task: DotNetCoreCLI@2
      displayName: Create code coverage report
      inputs:
        command: custom
        custom: tool
        arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'

    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage report
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: Publish app - $(buildConfiguration)
      inputs:
        command: publish
        projects: '**/$(dotNetProjectName).csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: Publish artifact to drop folder
      artifact: drop

- stage: Dev
  displayName: Deploy to Dev
  dependsOn: Build
  condition: |
    and
    (
      eq(variables['skipStageDev'], 'false'),
      eq(dependencies.Build.result, 'Succeeded'),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:

  - deployment: Deploy
    pool:
      vmImage: ubuntu-20.04
    environment: Dev
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            displayName: Download build artifact from drop folder
            artifact: drop

          - task: AzureWebApp@1
            displayName: Deploy to Azure App Service - $(webAppNameDev)
            inputs:
              azureSubscription: $(azureServiceConnectionName)
              appName: $(webAppNameDev)
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/$(dotNetProjectName).zip'

- stage: Test
  displayName: Deploy to Test
  dependsOn:
    - Build
    - Dev
  condition: |
    and
    (
      eq(variables['skipStageTest'], 'false'),
      eq(dependencies.Build.result, 'Succeeded'),
      in(dependencies.Dev.result, 'Succeeded', 'Skipped')
    )
  jobs:

  - deployment: Deploy
    pool:
      vmImage: ubuntu-20.04
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            displayName: Download build artifact from drop folder
            artifact: drop

          - task: AzureWebApp@1
            displayName: Deploy to Azure App Service - $(webAppNameTest)
            inputs:
              azureSubscription: $(azureServiceConnectionName)
              appName: $(webAppNameTest)
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/$(dotNetProjectName).zip'

  - job: RunUITests
    dependsOn: Deploy
    displayName: Run UI tests
    pool:
      vmImage: windows-2019
    steps:

    # - task: UseDotNet@2
    #   displayName: Use .NET Core SDK $(dotnetSdkVersion)
    #   inputs:
    #     version: $(dotnetSdkVersion)

    - task: DotNetCoreCLI@2
      displayName: Build UI tests project - $(buildConfiguration)
      inputs:
        command: build
        arguments: '--configuration $(buildConfiguration)'
        projects: '**/$(dotNetProjectName).UITests.csproj'
  
    - task: DotNetCoreCLI@2
      displayName: Run UI tests - $(buildConfiguration)
      inputs:
        command: test
        arguments: '--no-build --configuration $(buildConfiguration)'
        publishTestResults: true
        projects: '**/$(dotNetProjectName).UITests.csproj'        

- stage: Staging
  displayName: Deploy to Staging
  dependsOn:
    - Build
    - Dev
    - Test
  condition: |
    and
    (
      eq(variables['skipStageStaging'], 'false'),
      eq(dependencies.Build.result, 'Succeeded'),
      in(dependencies.Dev.result, 'Succeeded', 'Skipped'),
      in(dependencies.Test.result, 'Succeeded', 'Skipped')
    )
  jobs:

  - deployment: Deploy
    pool:
      vmImage: ubuntu-20.04
    environment: Staging
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            displayName: Download build artifact from drop folder
            artifact: drop

          - task: AzureWebApp@1
            displayName: Deploy to Azure App Service - $(webAppNameStaging)
            inputs:
              azureSubscription: $(azureServiceConnectionName)
              appName: $(webAppNameStaging)
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/$(dotNetProjectName).zip'
